apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: storage-layer
  labels:
    app: storage-layer
spec:
  serviceName: storage-layer
  selector:
    matchLabels:
      app: storage-layer
  replicas: 1
  template:
    metadata:
      labels:
        app: storage-layer
    spec:
      automountServiceAccountToken: false
      imagePullSecrets:
      - name: regcred
      initContainers:
      # The license file mount inside the conf volume prevents the volume to get initialized with the image data.
      # Therefore we need to copy the data from the image to the volume manually before startup.
      - name: storage-layer-conf
        image: ceyoniq.azurecr.io/release/nscale/storage-layer:ubi.9.0.1300.2023062918
        imagePullPolicy: Always
        command: [ "/bin/sh", "-c" ]
        args:
        - |
          # Copy the configuration from the image into the volume on first startup.
          test -f /mnt/DA_HID.DAT ||
            cp -a /opt/ceyoniq/nscale-server/storage-layer/etc/* /mnt
        volumeMounts:
        - name: storage-layer
          subPath: etc
          mountPath: /mnt
        resources:
          limits:
            cpu: "200m"
            memory: "200Mi"
            ephemeral-storage: "350Mi"
          requests:
            cpu: "100m"
            memory: "100Mi"
            ephemeral-storage: "250Mi"
      containers:
      - name: storage-layer
        image: ceyoniq.azurecr.io/release/nscale/storage-layer:ubi.9.0.1300.2023062918
        imagePullPolicy: Always
        readinessProbe:
          exec:
            command:
            - /opt/ceyoniq/nscale-server/storage-layer/bin/cstool
            - srv
            - -m1
            - -c
            - sock
          initialDelaySeconds: 1
          failureThreshold: 1
        env:
        - name: LOG_APPENDER
          value: "Console"
        #- name: NSTL_STORAGE-LAYER_LOGLEVEL
        #  value: "4"
        ports:
        - containerPort: 3005
          name: storage
        resources:
          limits:
            cpu: "2000m"
            memory: "1000Mi"
            ephemeral-storage: "350Mi"
          requests:
            cpu: "100m"
            memory: "100Mi"
            ephemeral-storage: "250Mi"
        volumeMounts:
        - name: license
          subPath: license.xml
          mountPath: /opt/ceyoniq/nscale-server/storage-layer/etc/license.xml
        - name: storage-layer
          subPath: log
          mountPath: /opt/ceyoniq/nscale-server/storage-layer/log
        - name: storage-layer
          subPath: ret
          mountPath: /opt/ceyoniq/nscale-server/storage-layer/ret
        - name: storage-layer
          subPath: etc
          mountPath: /opt/ceyoniq/nscale-server/storage-layer/etc
        - name: storage-layer
          subPath: da
          mountPath: /opt/ceyoniq/nscale-server/storage-layer/da
        - name: storage-layer
          subPath: arc
          mountPath: /opt/ceyoniq/nscale-server/storage-layer/arc
      volumes:
      - name: license
        configMap:
          name: license
      - name: storage-layer
        persistentVolumeClaim:
          claimName: storage-layer
  volumeClaimTemplates:
  - metadata:
      name: storage-layer
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 8Gi
---
apiVersion: v1
kind: Service
metadata:
  name: storage-layer
  labels:
    app: storage-layer
spec:
  clusterIP: None
  ports:
  - port: 3005
    targetPort: 3005
    name: storage-layer
    appProtocol: tcp
  selector:
    app: storage-layer

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: storage-layer
  labels:
    app: storage-layer
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: storage-layer